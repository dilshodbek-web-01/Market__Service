datasource db {
    url = env("DATABASE_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String    @map("id")         @db.Uuid         @default(uuid())
    username  String    @map("username")   @db.VarChar(32)
    password  String    @map("password")   @db.VarChar(128) 
    email     String    @map("email")      @db.VarChar(64)
    phone     String    @map("phone")      @db.VarChar(32)
    createdAt DateTime  @map("created_at") @db.Timestamp(0) @default(now())
    updatedAt DateTime  @map("updated_at") @db.Timestamp(0) @updatedAt
    deletedAt DateTime? @map("deleted_at") 

    orders    Order[]

    @@id([ id ])
    @@unique([ username ])
    @@map("users")
}

model Category {
    id        String    @map("id")         @db.Uuid         @default(uuid())
    title     String    @map("title")      @db.VarChar(32)
    createdAt DateTime  @map("created_at") @db.Timestamp(0) @default(now())
    updatedAt DateTime  @map("updated_at") @db.Timestamp(0) @updatedAt
    deletedAt DateTime? @map("deleted_at")

    sub_category subCategory[]

    @@id([ id ])
    @@unique([ title ])
    @@map("category")
}

model subCategory {
    id         String    @map("id")          @db.Uuid         @default(uuid())
    title      String    @map("title")       @db.VarChar(32)
    createdAt  DateTime  @map("created_at")  @db.Timestamp(0) @default(now())
    updatedAt  DateTime  @map("updated_at")  @db.Timestamp(0) @updatedAt
    deletedAt  DateTime? @map("deleted_at")
    categoryId String    @map("category_id") @db.Uuid

    category   Category @relation(fields: [ categoryId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)    

    product Product[]

    @@id([ id ])
    @@unique([ title ])
    @@map("sub_category")
}

model Product {
    id            String    @map("id")         @db.Uuid         @default(uuid())
    title         String    @map("title")      @db.VarChar(64)
    price         Int       @map("price")      @db.Integer
    image         String    @map("image")      @db.VarChar()
    status        String?   @map("status")     @db.VarChar(32)
    createdAt     DateTime  @map("created_at") @db.Timestamp(0) @default(now())
    updatedAt     DateTime  @map("updated_at") @db.Timestamp(0) @updatedAt
    deletedAt     DateTime? @map("deleted_at")
    subCategoryId String    @map("sub_category_id") @db.Uuid

    sub_category subCategory @relation(fields: [ subCategoryId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

    orders        Order[]

    @@id([ id ])
    @@map("product")
}

model Order {
    id        String    @map("id")         @db.Uuid         @default(uuid())
    productId String    @map("product_id") @db.Uuid 
    token     String    @map("user_id")    @db.Uuid
    createdAt DateTime  @map("created_at") @db.Timestamp(0) @default(now())
    updatedAt DateTime  @map("updated_at") @db.Timestamp(0) @updatedAt
    deletedAt DateTime? @map("deleted_at")

    product   Product   @relation(fields: [ productId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

    users     User   @relation(fields: [ token ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

    @@id([ id ])
    @@map("orders")
}